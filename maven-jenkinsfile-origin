@Library('libin-jks-share') _
properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '4'))])
def xxx_mvn = new org.devops.mvn()

node {
    stage('clean workspace') {
        deleteDir()
    }
    stage('Fetch Git Branches and Tags And git scm') {
        def gitUrl = 'git@codeup.aliyun.com:newxxx/wdb/wdb-warehouseallocate.git'  // 使用SSH协议的Git仓库地址
        // 使用withCredentials加载SSH凭据
        withCredentials([sshUserPrivateKey(credentialsId: 'xxx_code', keyFileVariable: 'SSH_KEY')]) {
            withEnv(["GIT_SSH_COMMAND=ssh -i $SSH_KEY -o StrictHostKeyChecking=no"]) {
            
                // 使用 SSH_KEY 环境变量执行 git 命令
                def branches = getGitBranchesOrTags(gitUrl, 'branches')
                def tags = getGitBranchesOrTags(gitUrl, 'tags')

                // 合并分支和标签为单一列表，带上前缀
                def options = []
                branches.each { branch ->
                    options << "Branch: ${branch}"
                }
                tags.each { tag ->
                    options << "Tag: ${tag}"
                }

                // 让用户从列表中选择分支或标签
                def userChoice = input(
                    id: 'UserChoice', message: '请选择一个分支或标签:', parameters: [
                    choice(name: 'BranchOrTag', choices: options.join('\n'), description: '分支或标签')
                ])

                echo "用户选择了: ${userChoice}"
                // 判断用户选择的是分支还是标签，并提取实际名称
                def selectedRef = userChoice.replaceAll('^(Branch|Tag): ', '')
                try {
                    // checkout([$class: 'GitSCM', branches: [[name: "${userChoice}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'xxx_code', name: 'branchStatus', url: 'git@codeup.aliyun.com:newxxx/wdb/wdb-warehouseallocate.git']]])
                    checkout([$class: 'GitSCM', branches: [[name: selectedRef ]], extensions: [], userRemoteConfigs: [[credentialsId: 'xxx_code', url: gitUrl]]])
                } catch (Exception e) {
                    echo "Error ${e.message}"
                }
            }
        }

    }
    stage('git scm and maven') {
        xxx_mvn.timedMavenBuild("clean package -U -DskipTests")
    }
    stage('find jar') {
        def myJar = findJars("${WORKSPACE}", ".jar")
        echo myJar
    }
}